# Create a Class
snippet class "New class" b
class $1
{
	// Properties
	$2
	// Methods
	$3
}
$0
endsnippet

# Create a abstract Class
snippet abs "New abstract class" b
abstract class $1
{
	// Properties
	$2
	// Methods
	$3
}
$0
endsnippet

# Create a new Trait
snippet trait "New Trait" b
trait $1 
{
	$2
}
$0
endsnippet
# Create a new interface
snippet interface "New Interface" b
interface $1 
{
	$2
}
$0
endsnippet

# Create constructor
snippet const "Constructer" b
// Constructer
public function __construct(${1:$options})
{
	${2:// code};
}
$0
endsnippet

# Create getter and setter
snippet cgs "Class Getter Setter" b

// Getter for $1 , @return $1
public function get$1() 
{
	return $this->$1;
}
// Setter for $1, @param $$3 , @return $0
public function set$1 ($$3)
{
	$this->$1 = $$3;

	return $this;
}
endsnippet

# Create public Function
snippet puf "Public Function" r
public function ${1:name}(${2:inputType} $${3:param}) : ${4:outputType}
{
	${VISUAL}${5:return null};
}
$0
endsnippet

# Create private Function
snippet prf "Private Function" r
private function ${1:name}(${2:inputType} $${3:param}) : ${4:outputType}
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

# Create protected Function
snippet ptf "Protected Function" r
protected function ${1:name}(${2:inputType} $${3:param}) : ${4:outputType}
{
	${VISUAL}${5:return null;}
}
$0
endsnippet


# Create static public Function
snippet spuf "Static Public Function" r
static public function ${1:name}(${2:inputType} $${3:param}) : ${4:outputType}
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

# Create static private Function
snippet sprf "Static Private Function" r
static private function ${1:name}(${2:inputType} $${3:param}) : ${4:outputType}
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

# Create static protected Function
snippet sptf "Static Protected Function" r
static protected function ${1:name}(${2:inputType} $${3:param}) : ${4:outputType}
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

# Create abstract public Function
snippet apuf "Static Public Function" r
abstract public function ${1:name}(${2:inputType} $${3:param}) : ${4:outputType};
$0
endsnippet

# Create static private Function
snippet aprf "Static Private Function" r
abstract private function ${1:name}(${2:inputType} $${3:param}) : ${4:outputType};
$0
endsnippet

# Create static protected Function
snippet aptf "Static Protected Function" r
abstract protected function ${1:name}(${2:inputType} $${3:param}) : ${4:outputType};
$0
endsnippet

# Create public variable
snippet pup "Public Variable" r
public $${1:name}${2: = };
$0
endsnippet

# Create private variable
snippet prp "Private Variable" r
private $${1:name}${2: = };
$0
endsnippet

# Create a protected variable
snippet ktp "Protected Variable" r
protected $${1:name}${2: = };
$0
endsnippet

# Init new object
snippet new "new class instance" r
$${1:name} = new ${2:Class}($3);
$0
endsnippet

# Regular function
snippet fu "Function snip" r
function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

# Regular foreachlop
snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}){
	${VISUAL}${4}
}
$0
endsnippet

# Regular for
snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

# Regular If else
snippet ife "if else"
if (${1:/* condition */}) {
	${2:// code...};
} else {
	${3:// code...};
}
$0
endsnippet

# Regular If
snippet if "if"
if (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

# Regular else
snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet ph "Head" b
<?php
endsnippet
