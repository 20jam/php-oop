# Create a Class
snippet class "New class" b
class $1
{
	// Properties
	$2
	// Methods
	$3
}
$0
endsnippet

# Create a abstract Class
snippet aclass "New abstract class" b
abstract class $1
{
	// Properties
	$2
	// Methods
	$3
}
$0
endsnippet

# Create a new Trait
snippet trait "New Trait" b
trait $1 
{
	$2
}
$0
endsnippet
# Create a new interface
snippet interf "New Interface" b
interface $1 
{
	$2
}
$0
endsnippet

# Create constructor
snippet const "Constructer" b
// Constructer
public function __construct(${1:$options})
{
	${2:// code};
}
$0
endsnippet

# Create getter and setter
snippet cgs "Class Getter Setter" b

// Getter for $1 , @return $1
public function get$1() 
{
	return $this->$1;
}
// Setter for $1, @param $$3 , @return $0
public function set$1 ($$3)
{
	$this->$1 = $$3;

	return $this;
}
endsnippet

# Create public Function
snippet fpu "Public Function" b
public function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null};
}
$0
endsnippet

# Create private Function
snippet fpr "Private Function" b
private function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

# Create protected Function
snippet fpt "Protected Function" b
protected function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet


# Create static public Function
snippet fpus "Static Public Function" b
static public function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

# Create static private Function
snippet fprs "Static Private Function" b
static private function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

# Create static protected Function
snippet fpts "Static Protected Function" b
static protected function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

# Create public variable
snippet vpu "Public Variable" b
public $${1:name}${2: = };
$0
endsnippet

# Create private variable
snippet vpr "Private Variable" b
private $${1:name}${2: = };
$0
endsnippet

# Create a protected variable
snippet vpt "Protected Variable" b
protected $${1:name}${2: = };
$0
endsnippet

# Init new object
snippet new "new class instance" b
$${1:name} = new ${2:Class}($3);
$0
endsnippet

# Regular function
snippet fu "Function snip" b
function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

# Regular foreachlop
snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}){
	${VISUAL}${4}
}
$0
endsnippet

# Regular for
snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

# Regular If else
snippet ife "if else"
if (${1:/* condition */}) {
	${2:// code...};
} else {
	${3:// code...};
}
$0
endsnippet

# Regular If
snippet if "if"
if (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

# Regular else
snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet ph "Head" b
<?php
endsnippet
